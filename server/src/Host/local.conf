location /@client_id_header@ {
access_by_lua '

          local opts = {
             redirect_uri_path = "@client_id_redirect@",
             discovery = "http://pro-itech.ru:5000/.well-known/openid-configuration",
             client_id = "@client_id@",
             client_secret = "secret"
             --authorization_params = { hd="pingidentity.com" },
             --scope = "openid email profile",
             --refresh_session_interval = 900,
             --iat_slack = 600,
             --redirect_uri_scheme = "http",
             --logout_path = "/logout",
             --redirect_after_logout_uri = "/",
             --redirect_after_logout_with_id_token_hint = true,
             --token_endpoint_auth_method = ["client_secret_basic"|"client_secret_post"],
             --ssl_verify = "no",
             --access_token_expires_in = 3600,
             --access_token_expires_leeway = 0,
             --force_reauthorize = false
          }

          local res, err = require("resty.openidc").authenticate(opts)

          if err then
            ngx.status = 500
            ngx.say(err)
            ngx.exit(ngx.HTTP_INTERNAL_SERVER_ERROR)
          end

          --if res.id_token.hd ~= "pingidentity.com" then
          --  ngx.exit(ngx.HTTP_FORBIDDEN)
          --end

          --if res.user.email ~= "hans.zandbelt@zmartzone.eu" then
          --  ngx.exit(ngx.HTTP_FORBIDDEN)
          --end

          local http = require "resty.http"
          local httpc = http.new()
          local res2, err2 = httpc:request_uri("http://pro-itech.ru:5000/Validate/ValidatePermissions", {
            method = "POST",
            body = "sub=" .. res.id_token.sub .. "&uri=" .. ngx.var.request_uri .. "&domain=" .. ngx.var.host .. ":" .. ngx.var.server_port .. "&scheme=" .. ngx.var.scheme,
            --headers = res.headers
            headers = {
              ["Content-Type"] = "application/x-www-form-urlencoded",
            }
          })

          if err2 then
            ngx.status = 500
            ngx.say(err2)
            ngx.exit(ngx.HTTP_INTERNAL_SERVER_ERROR)
          end

          if res2.status == 404 then
            ngx.status = 500
            ngx.say("not found validate resource")
            ngx.exit(ngx.HTTP_INTERNAL_SERVER_ERROR)
          end
          
          if res2.status == 500 then
            ngx.status = 500
            ngx.say("Error in validate method")
            ngx.exit(ngx.HTTP_INTERNAL_SERVER_ERROR)
          end

          if res2.status == 403 then
            ngx.status = 403
            ngx.exit(ngx.HTTP_FORBIDDEN)
            --ngx.say("failed to request: ", err2)
            --return
          end

          for k,v in pairs(res.user) do
            ngx.req.set_header("X-USER-"..k, tostring(v))
          end
          for k,v in pairs(res.id_token) do
            ngx.req.set_header("X-USER-"..k, tostring(v))
          end
          ngx.req.set_header("X-DATA-REQUEST", res2.status)
          ngx.req.set_header("X-DATA-REQUEST-ERR", err2)
          ngx.req.set_header("X-DATA-REQUEST-URI", ngx.var.request_uri)
      ';

      proxy_pass @proxy_pass@;
}
